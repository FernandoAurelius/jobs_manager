name: Django CD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      # Code Checkout
      - name: Checkout Repository
        uses: actions/checkout@v4

      # SSH Configuration and EC2 Deploy
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Scheduler Machine
        env:
            SCHEDULER_HOST: ${{ vars.SCHEDULER_HOST }}
            AWS_USER: ${{ vars.AWS_USER }}
            PROJECT_PATH: ${{ vars.PROJECT_PATH }}
        run: |
            echo "Deploying to Scheduler Machine: $SCHEDULER_HOST"

            if ssh -T -o StrictHostKeyChecking=no -o ConnectTimeout=10 $AWS_USER@$SCHEDULER_HOST << EOF
              cd $PROJECT_PATH || exit 1
              git switch main
              git pull -f origin main
              source .venv/bin/activate

              poetry install
              npm install

              python manage.py migrate
              python manage.py collectstatic --noinput

              sudo systemctl restart workflow
              sudo systemctl restart scheduler
              sudo systemctl reload nginx
            EOF
            then
              echo "Scheduler machine deployment successful"
            else
              echo "Scheduler machine deployment failed"
              exit 1
            fi

      - name: Deploy to Frontend/Backend Machine
        continue-on-error: true
        env:
            FRONTEND_HOST: ${{ vars.FRONTEND_HOST }}
            AWS_USER: ${{ vars.AWS_USER }}
            PROJECT_PATH: ${{ vars.PROJECT_PATH }}
        run: |
            echo "Deploying to Frontend/Backend Machine: $FRONTEND_HOST"

            if ssh -T -o StrictHostKeyChecking=no -o ConnectTimeout=10 $AWS_USER@$FRONTEND_HOST << 'EOF'
              set -e  # Exit on any error
              cd $PROJECT_PATH || exit 1
              git switch main
              git pull -f origin main
              source .venv/bin/activate

              poetry install
              npm install

              # Skip migrations since scheduler already ran them
              python manage.py collectstatic --noinput

              sudo systemctl restart workflow
              sudo systemctl reload nginx
            EOF
            then
              echo "Frontend/Backend machine deployment successful"
            else
              echo "Frontend/Backend machine deployment failed or machine offline"
              exit 1
            fi

      - name: Deployment Summary
        run: |
          echo "Deployment Summary:"
          echo "- Scheduler machine: Required"
          echo "- Frontend/Backend machine: Optional (may be offline)"
