from django.http import JsonResponse, FileResponse

from django.core.mail import send_mail

from django.contrib import messages

from django.shortcuts import get_object_or_404

from io import BytesIO

from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

from workflow.models import Job
from workflow.utils import extract_messages

# TODO: 
# 1. Define a name for the file (currently untitled)
# 2. Fetch quote data from AG Grid somehow to show up in the PDF
def create_pdf(job):
    """
    Generate a PDF for the given job, including a quotes table.

    Args:
        job: The Job instance for which the PDF will be generated.

    Returns:
        BytesIO: A buffer containing the generated PDF.
    """ 
    buffer = BytesIO()
    pdf = canvas.Canvas(buffer, pagesize=letter)
   
    # Header with job and client information
    pdf.setFont("Helvetica-Bold", 16)
    pdf.drawString(50, 750, f"Quote Summary for {job.name}")
    pdf.setFont("Helvetica", 12)
    pdf.drawString(50, 720, f"Client: {job.client.name if job.client else "N/A"}")
    pdf.drawString(
        50,
        700,
        f"Contact: {job.client.email if job.client.email else job.contact_person if job.contact_person else "N/A"}",
    )
    pdf.drawString(50, 680, f"Job Description: {job.description[:200] if job.description else "N/A"}...")

    # Table headers
    start_y = 640
    pdf.setFont("Helvetica-Bold", 14)
    pdf.drawString(50, start_y, "Quotes Table")

    # Fetch Job Pricing Data
    job_pricing = job.latest_quote_pricing

    # Footer
    pdf.setFont("Helvetica-Oblique", 10)
    pdf.drawString(50, 50, "Generated by Morris Sheetmetals - Workflow App")
    pdf.showPage()
    pdf.save()  

    buffer.seek(0)
    return FileResponse(buffer, as_attachment=False, filename=f"quote_summary_{job.name}.pdf")


def generate_quote_pdf(request, job_id):
    """
    Generate a PDF quote summary for a specific job.

    Args:
        request: The HTTP request object
        job_id: The ID of the job to generate the PDF for

    Returns:
        FileResponse: A PDF file response containing the quote summary

    Raises:
        Http404: If the job with the given ID does not exist
    """
    job = get_object_or_404(Job, pk=job_id)
    pdf_buffer = create_pdf(job)

    response = FileResponse(
        pdf_buffer,
        as_attachment=False,
        filename=f"quote_summary_{job.name}.pdf"
    )
    response["Content-Type"] = "application/pdf"
   
    return response


def send_quote_email(request, job_id):
    """
    Send a quote summary for a specific job via email.

    Args:
        request: The HTTP request object
        job_id: The ID of the job to send the quote for

    Returns:
        HttpResponse: A success message indicating the email was sent

    Raises:
        Http404: If the job with the given ID does not exist
    """
    job = get_object_or_404(Job, pk=job_id)
    email = job.client.email if job.client and job.client.email else None

    if not email:
        messages.error(request, "Client email not found")
        return JsonResponse(
            {"error": "Client email not found", "messages": extract_messages(request)},
            status=400,
        )

    pdf_buffer = create_pdf(job)
    pdf_content = pdf_buffer.getvalue()
    pdf_buffer.close()

    send_mail(
        subject=f"Quote Summary for {job.name}",
        message=f"Please find the attached quote summary for {job.name}.",
        from_email="",  # Need to configure a real domain to send e-mails
        recipient_list=[email],
        fail_silently=False,
        html_message=f"<p>Please find the attached quote summary for {job.name}.</p>",
        attachments=[
            (f"quote_summary_{job.name}.pdf", pdf_content, "application/pdf")
        ],
    )

    messages.success(request, "Email sent successfully")
    return JsonResponse({"success": True, "messages": extract_messages(request)})
