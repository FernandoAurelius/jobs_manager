# Generated by Django 5.2 on 2025-06-14 09:19

from django.db import migrations, models, connection


def handle_unique_constraint(apps, schema_editor):
    """Manually handle the unique constraint update"""
    with connection.cursor() as cursor:
        # Check existing constraints
        cursor.execute("""
            SELECT CONSTRAINT_NAME 
            FROM information_schema.TABLE_CONSTRAINTS 
            WHERE TABLE_NAME = 'quoting_supplierproduct' 
            AND CONSTRAINT_TYPE = 'UNIQUE'
            AND TABLE_SCHEMA = DATABASE()
        """)
        
        existing_constraints = cursor.fetchall()
        
        # Drop any existing unique constraints
        for constraint in existing_constraints:
            constraint_name = constraint[0]
            cursor.execute(f"ALTER TABLE quoting_supplierproduct DROP INDEX `{constraint_name}`")
        
        # Add the new unique constraint
        cursor.execute("""
            ALTER TABLE quoting_supplierproduct 
            ADD UNIQUE KEY `quoting_supplierproduct_unique` (`supplier_id`, `item_no`, `variant_id`)
        """)


def reverse_unique_constraint(apps, schema_editor):
    """Reverse the unique constraint change"""
    with connection.cursor() as cursor:
        cursor.execute("ALTER TABLE quoting_supplierproduct DROP INDEX IF EXISTS `quoting_supplierproduct_unique`")


class Migration(migrations.Migration):

    dependencies = [
        ("client", "0004_populate_merge_fields"),
        ("quoting", "0004_scrapejob"),
    ]

    operations = [
        # Add the index first
        migrations.AddIndex(
            model_name="supplierproduct",
            index=models.Index(
                fields=["item_no"], name="quoting_sup_item_no_c2e6f6_idx"
            ),
        ),
        # Use RunPython to handle the unique constraint
        migrations.RunPython(
            handle_unique_constraint,
            reverse_unique_constraint,
        ),
        # Update the model state to reflect the change
        migrations.AlterUniqueTogether(
            name="supplierproduct",
            unique_together={("supplier", "item_no", "variant_id")},
        ),
    ]